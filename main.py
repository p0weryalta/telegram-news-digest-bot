#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import re
from typing import List, Optional, Tuple
import xml.etree.ElementTree as ET
from urllib.parse import urlparse

import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
numeric_level = getattr(logging, LOG_LEVEL, logging.INFO)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=numeric_level
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_MESSAGE_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
MAX_URLS_PER_MESSAGE = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
URL_PATTERN = re.compile(
    r'^https?://'  # http:// –∏–ª–∏ https://
    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # –¥–æ–º–µ–Ω
    r'localhost|'  # localhost
    r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # –∏–ª–∏ IP
    r'(?::\d+)?'  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    r'(?:/?|[/?]\S+)$', re.IGNORECASE
)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ sitemap
SITEMAP_PATTERN = re.compile(r'sitemap.*\.xml$', re.IGNORECASE)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ sitemap-—Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ URL sitemap.xml, "
        f"–∏ —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ –≤—Å–µ URL.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/parse <i>URL</i> - –ü–∞—Ä—Å–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π sitemap\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å URL sitemap-—Ñ–∞–π–ª–∞ –≤ —á–∞—Ç, "
        "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>:\n"
        "/parse https://example.com/sitemap.xml\n"
        "https://example.com/sitemap.xml"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def parse_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse."""
    if not context.args or not context.args[0]:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL sitemap —Ñ–∞–π–ª–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: /parse https://example.com/sitemap.xml"
        )
        return

    url = context.args[0]
    await handle_url(update, url)

def parse_sitemap(url: str) -> Tuple[List[str], Optional[str]]:
    """
    –ü–∞—Ä—Å–∏—Ç sitemap –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).
    
    Args:
        url: URL sitemap-—Ñ–∞–π–ª–∞
        
    Returns:
        Tuple[List[str], Optional[str]]: –°–ø–∏—Å–æ–∫ URL –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    urls = []
    error = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
    if not URL_PATTERN.match(url):
        return [], f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: {url}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–µ–¥–µ—Ç –Ω–∞ sitemap —Ñ–∞–π–ª
    parsed_url = urlparse(url)
    path = parsed_url.path
    
    if not path or not SITEMAP_PATTERN.search(path):
        return [], f"‚ö†Ô∏è URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ sitemap —Ñ–∞–π–ª: {url}"
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sitemap —Ñ–∞–π–ª
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç XML
        content_type = response.headers.get('Content-Type', '')
        if 'text/xml' not in content_type and 'application/xml' not in content_type:
            return [], f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è XML: {content_type}"
        
        # –ü–∞—Ä—Å–∏–º XML
        root = ET.fromstring(response.content)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ URL –≤ sitemap
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ sitemap: xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        # –∏ xmlns="http://www.google.com/schemas/sitemap/0.84"
        namespaces = {
            'sm': 'http://www.sitemaps.org/schemas/sitemap/0.9',
            'sm_old': 'http://www.google.com/schemas/sitemap/0.84'
        }
        
        # –ò—â–µ–º URL –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        for url_elem in root.findall('.//sm:url/sm:loc', namespaces) or root.findall('.//sm_old:url/sm_old:loc', namespaces):
            if url_elem.text and url_elem.text.strip():
                urls.append(url_elem.text.strip())
        
        # –ï—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –±–µ–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
        if not urls:
            for url_elem in root.findall('.//url/loc') or root.findall('.//sitemap/loc'):
                if url_elem.text and url_elem.text.strip():
                    urls.append(url_elem.text.strip())
        
        if not urls:
            return [], "‚ö†Ô∏è –í sitemap –Ω–µ –Ω–∞–π–¥–µ–Ω–æ URL"
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ sitemap: {e}")
        return [], f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ sitemap: {str(e)}"
    except ET.ParseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XML: {e}")
        return [], f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XML: {str(e)}"
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return [], f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    
    return urls, error

async def send_url_batches(update: Update, urls: List[str]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–∫–∏ URL –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        urls: –°–ø–∏—Å–æ–∫ URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    if not urls:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL
    await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω–æ URL: {len(urls)}")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º URL –Ω–∞ –ø–∞–∫–µ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram
    for i in range(0, len(urls), MAX_URLS_PER_MESSAGE):
        batch = urls[i:i + MAX_URLS_PER_MESSAGE]
        message = "\n".join(batch)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(message) > MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏
            current_message = ""
            for url in batch:
                if len(current_message) + len(url) + 1 > MAX_MESSAGE_LENGTH:
                    await update.message.reply_text(current_message)
                    current_message = url + "\n"
                else:
                    current_message += url + "\n"
            
            if current_message:
                await update.message.reply_text(current_message)
        else:
            await update.message.reply_text(message)

async def handle_url(update: Update, url: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        url: URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    await update.message.reply_text(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ sitemap: {url}")
    
    # –ü–∞—Ä—Å–∏–º sitemap
    urls, error = parse_sitemap(url)
    
    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if error:
        await update.message.reply_text(error)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ URL
    await send_url_batches(update, urls)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL
    if URL_PATTERN.match(text):
        await handle_url(update, text)
    else:
        await update.message.reply_text(
            "ü§î –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ URL –Ω–∞ sitemap.xml —Ñ–∞–π–ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: https://example.com/sitemap.xml\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("parse", parse_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main() 