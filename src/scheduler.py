import logging
import schedule
import time
import threading
import asyncio
from datetime import datetime
from telegram import Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

class DigestScheduler:
    def __init__(self, sitemap_parser, digest_chat_id=None, interval_hours=1, max_articles=10, bot_token=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        
        :param sitemap_parser: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ sitemap
        :param digest_chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        :param interval_hours: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–≤ —á–∞—Å–∞—Ö)
        :param max_articles: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–∞—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
        :param bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.sitemap_parser = sitemap_parser
        self.digest_chat_id = digest_chat_id
        self.interval_hours = interval_hours
        self.max_articles = max_articles
        self.is_running = False
        self.scheduler_thread = None
    
    async def send_digest_async(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ sitemap.xml...")
            articles = self.sitemap_parser.parse_sitemap()
            
            if not articles:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(articles)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
            
            digest_text = self.sitemap_parser.format_digest(articles, self.max_articles)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram
            if self.digest_chat_id and self.bot_token:
                bot = Bot(token=self.bot_token)
                await bot.send_message(
                    chat_id=self.digest_chat_id,
                    text=f'üì∞ –°–≤–µ–∂–∏–π –¥–∞–π–¥–∂–µ—Å—Ç:\n\n{digest_text}',
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {self.digest_chat_id}")
            else:
                logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
    
    def send_digest(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(self.send_digest_async())
        finally:
            loop.close()
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not self.bot_token:
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            return
            
        if not self.digest_chat_id:
            logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            return
        
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.interval_hours} —á–∞—Å(–æ–≤)")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å (–∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        schedule.every(self.interval_hours).hours.do(self.send_digest)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_scheduler():
            self.is_running = True
            while self.is_running:
                schedule.run_pending()
                time.sleep(1)
                
        self.scheduler_thread = threading.Thread(target=run_scheduler)
        self.scheduler_thread.daemon = True
        self.scheduler_thread.start()
        
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {self.interval_hours} —á–∞—Å(–æ–≤)")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        self.is_running = False
        schedule.clear()
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=1)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 